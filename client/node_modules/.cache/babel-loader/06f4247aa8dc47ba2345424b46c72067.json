{"ast":null,"code":"import _toConsumableArray from \"/c/Users/lil58/workspace/Tennis/tennis/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar events = function events() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_EVENT':\n      action.payload.event.id = action.payload.id;\n      return [].concat(_toConsumableArray(state), [action.payload.event]);\n\n    case 'DELETE_EVENT':\n      var array = _toConsumableArray(state); // make a separate copy of the array\n\n\n      array = array.filter(function (item) {\n        return item.id != action.payload.event.id;\n      });\n      return array;\n\n    case 'UPDATE_EVENT':\n      state.forEach(function (item) {\n        if (item.id == action.payload.event.id) {\n          item = action.payload.event;\n        }\n      });\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default events;","map":{"version":3,"sources":["/c/Users/lil58/workspace/Tennis/tennis/src/reducer/event.js"],"names":["events","state","action","type","payload","event","id","array","filter","item","forEach"],"mappings":";;AAAA,IAAMA,MAAM,GAAG,SAATA,MAAS,GAAuB;AAAA,MAAtBC,KAAsB,uEAAd,EAAc;AAAA,MAAVC,MAAU;;AACrC,UAAOA,MAAM,CAACC,IAAd;AACC,SAAK,WAAL;AACCD,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAf,CAAqBC,EAArB,GAA0BJ,MAAM,CAACE,OAAP,CAAeE,EAAzC;AACA,0CAAWL,KAAX,IAAiBC,MAAM,CAACE,OAAP,CAAeC,KAAhC;;AACD,SAAK,cAAL;AACC,UAAIE,KAAK,sBAAON,KAAP,CAAT,CADD,CACyB;;;AACxBM,MAAAA,KAAK,GAAGA,KAAK,CAACC,MAAN,CAAa,UAAAC,IAAI,EAAE;AAAC,eAAOA,IAAI,CAACH,EAAL,IAAUJ,MAAM,CAACE,OAAP,CAAeC,KAAf,CAAqBC,EAAtC;AAAyC,OAA7D,CAAR;AACA,aAAOC,KAAP;;AACD,SAAK,cAAL;AACCN,MAAAA,KAAK,CAACS,OAAN,CAAc,UAAAD,IAAI,EAAE;AACnB,YAAGA,IAAI,CAACH,EAAL,IAAWJ,MAAM,CAACE,OAAP,CAAeC,KAAf,CAAqBC,EAAnC,EAAsC;AACrCG,UAAAA,IAAI,GAAGP,MAAM,CAACE,OAAP,CAAeC,KAAtB;AACA;AACD,OAJD;AAKA,aAAOJ,KAAP;;AACD;AACC,aAAOA,KAAP;AAhBF;AAkBA,CAnBD;;AAqBA,eAAeD,MAAf","sourcesContent":["const events = (state = [], action) =>{\r\n\tswitch(action.type){\r\n\t\tcase 'ADD_EVENT':\r\n\t\t\taction.payload.event.id = action.payload.id;\r\n\t\t\treturn [...state,action.payload.event];\r\n\t\tcase 'DELETE_EVENT':\r\n\t\t\tvar array = [...state]; // make a separate copy of the array\r\n\t\t\tarray = array.filter(item=>{return item.id!= action.payload.event.id});\r\n\t\t\treturn array;\r\n\t\tcase 'UPDATE_EVENT':\r\n\t\t\tstate.forEach(item=>{\r\n\t\t\t\tif(item.id == action.payload.event.id){\r\n\t\t\t\t\titem = action.payload.event;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn state;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default events;\r\n"]},"metadata":{},"sourceType":"module"}